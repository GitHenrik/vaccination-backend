{"version":3,"sources":["utils/wrappers.js","components/Loader.js","utils/colors.js","graphs/InjectionGraph.js","graphs/UnusedVaccineGraph.js","graphs/OrderGraph.js","graphs/SpecificDateGraph.js","graphs/AggregatedDataGraph.js","components/Charts.js","components/GeneralInfo.js","components/DateSelector.js","components/Footer.js","components/Banner.js","helpers/calculations.js","App.js","reportWebVitals.js","index.js"],"names":["MainContentWrapper","styled","div","SidebarWrapper","DisplayWrapper","BannerWrapper","FooterWrapper","ContentWrapper","InfoWrapper","BackgroundWrapper","ChartWrapper","LoadingWrapper","Header","h1","SubHeader","h2","Loader","speed","width","height","backgroundColor","foregroundColor","colors","antiquaPrimary","antiquaSecondary","solarBuddhicaPrimary","solarBuddhicaSecondary","zerpfyPrimary","zerpfySecondary","usedPrimary","usedSecondary","unusedPrimary","unusedSecondary","InjectionGraph","antiqua","solarBuddhica","zerpfy","data","labels","datasets","label","vaccineCount","borderColor","borderWidth","options","plugins","title","display","text","UnusedVaccineGraph","usedVaccineCount","unusedVaccineCount","OrderGraph","orderCount","indexAxis","elements","bar","responsive","legend","position","SpecificDateGraph","ordersOnDate","injectionsOnDate","AggregatedDataGraph","injectedUpToDate","expiredUpToDate","usableOnDate","Charts","props","showDateCharts","tenDayExpirations","showAggregatedCharts","GeneralInfo","totalOrderCount","totalVaccineCount","injections","DateSelector","selected","selectedDate","onChange","date","handleDateChange","toString","Footer","href","target","rel","Banner","getVaccinesPerProducer","producerData","length","reduce","injected","next","calculateUsableAndInjectedVaccines","orderData","vaccinationData","expirationArrays","calculateExpirationArrays","injectionArrays","calculateInjectionArrays","notExpiredCount","i","givenNotExpired","j","sourceBottle","id","usable","calculateTenDayExpirations","currentExpirations","calculateExpirationsUpToDate","futureDate","Date","setDate","getDate","expiredInjections","expiredOrders","notExpiredOrders","nextTime","thirtyDaysMilliseconds","endTime","getTime","arrived","push","getOrdersOnDate","nextDate","getFullYear","getMonth","given","notGiven","vaccinationDate","require","config","App","placeholder","useState","loading","setLoading","setVaccinationData","setAntiqua","setSolarBuddhica","setZerpfy","setSelectedDate","showGeneralInfo","setShowGeneralInfo","setShowDateCharts","setShowAggregatedCharts","setOrdersOnDate","setInjectionsOnDate","setExpiredUpToDate","setInjectedUpToDate","setUsableOnDate","setTenDayExpirations","setTotalVaccineCount","setTotalOrderCount","setUsedVaccineCount","setUnusedVaccineCount","useEffect","getBaseData","setTimeout","a","axios","get","antiquaResult","antiquaVaccines","count","solarBuddhicaResult","solarBuddhicaVaccines","zerpfyResult","zerpfyVaccines","vaccinationResult","getVaccinesOnDate","aggregatedData","usableAndInjected","calculateAggregatedData","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.24cc327f.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nexport const MainContentWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  background: linear-gradient(#93C6D6, #A7ACD9);\r\n  height: 100%;\r\n`\r\n\r\nexport const SidebarWrapper = styled.div`\r\n  font-family: \"Open Sans\";\r\n  font-style: normal;\r\n  color: #f2f2f2;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 0 1rem 1rem 1rem;\r\n  width: 40%;\r\n  border-right: 2px solid #444444;\r\n  min-width: 260px;\r\n`\r\n\r\nexport const DisplayWrapper = styled.div`\r\n  padding-bottom: 5rem;\r\n  padding-left: 1rem;\r\n  font-family: \"Open Sans\";\r\n  font-style: normal;\r\n  line-height: 1.25rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n`\r\n\r\nexport const BannerWrapper = styled.div`\r\nmargin: 0;\r\nborder: 0;\r\nmin-width: 768px;\r\nbackground: radial-gradient(#aaaaaa, #666666);\r\ndisplay: flex;\r\njustify-content: space-around;\r\nalign-items: center;\r\nborder-bottom: 2px solid #444444;\r\n`\r\n\r\nexport const FooterWrapper = styled.div`\r\nmin-width: 768px;\r\nheight: 4rem;\r\nbackground: radial-gradient(#aaaaaa, #666666);\r\ndisplay: flex;\r\nflex-direction: row-reverse;\r\nalign-items: center;\r\na {\r\n  background: rgba(255, 255, 255, 0.5);\r\n  padding: 0.5rem;\r\n  border-radius: 0.5rem;\r\n  text-decoration: none;\r\n  margin-right: 1rem;\r\n}\r\n`\r\n\r\nexport const ContentWrapper = styled.div`\r\nwidth: 90%;\r\nalign-items: left;\r\npadding-bottom: 1rem;\r\npadding-top: 1rem;\r\n`\r\n\r\nexport const InfoWrapper = styled.div`\r\npadding: 0.5rem 0 0.5rem 1rem;\r\n`\r\n\r\nexport const BackgroundWrapper = styled.div`\r\nbackground-color: rgba(255, 255, 255, 0.5);\r\nborder-radius: 0.75rem;\r\npadding: 0.5rem;\r\n`\r\n\r\nexport const ChartWrapper = styled.div`\r\nwidth: 80%;\r\nmax-width: 550px;\r\nmin-width: 350px;\r\npadding: 0.5rem;\r\nbackground-color: #eeeeee;\r\nborder: 1px solid #777777;\r\nborder-radius: 0.75rem;\r\nmargin: 0.5rem;\r\n`\r\n\r\nexport const LoadingWrapper = styled.div`\r\npadding: 3rem;\r\n`\r\n\r\nexport const Header = styled.h1`\r\nfont-size: 1.5rem;\r\nmargin: 0;\r\ncolor: #000000;\r\npadding: 1.5rem 0;\r\n`\r\n\r\nexport const SubHeader = styled.h2`\r\nfont-size: 1.25rem;\r\nmargin: 0;\r\npadding: 0.5rem 0;\r\n`","import React from 'react'\r\nimport { MainContentWrapper, LoadingWrapper, Header } from '../utils/wrappers'\r\nimport ContentLoader from 'react-content-loader'\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <MainContentWrapper>\r\n      <LoadingWrapper>\r\n        <Header>Loading...</Header>\r\n        <ContentLoader \r\n          speed={3}\r\n          width={700}\r\n          height={360}\r\n          backgroundColor=\"#f3f3f3\"\r\n          foregroundColor=\"#ecebeb\"\r\n        ></ContentLoader>\r\n      </LoadingWrapper>\r\n    </MainContentWrapper>\r\n  )\r\n}\r\n\r\nexport default Loader","const colors = {\r\n  antiquaPrimary: 'rgba(153, 102, 255, 0.2)',\r\n  antiquaSecondary: 'rgba(153, 102, 255, 1)',\r\n  solarBuddhicaPrimary: 'rgba(255, 206, 86, 0.2)',\r\n  solarBuddhicaSecondary: 'rgba(255, 206, 86, 1)',\r\n  zerpfyPrimary: 'rgba(75, 192, 192, 0.2)',\r\n  zerpfySecondary: 'rgba(75, 192, 192, 1)',\r\n  usedPrimary: 'rgba(54, 162, 235, 0.2)',\r\n  usedSecondary: 'rgba(54, 162, 235, 1)',\r\n  unusedPrimary: 'rgba(255, 99, 132, 0.2)',\r\n  unusedSecondary: 'rgba(255, 99, 132, 1)',\r\n}\r\n\r\nexport default colors","import { Doughnut } from 'react-chartjs-2'\r\nimport PropTypes from 'prop-types'\r\nimport colors from '../utils/colors'\r\nimport React from 'react'\r\n\r\nconst InjectionGraph = ({antiqua, solarBuddhica, zerpfy}) => {\r\n  const data = {\r\n    labels: ['Antiqua vaccines', 'SolarBuddhica vaccines', 'Zerpfy vaccines'],\r\n    datasets: [\r\n      {\r\n        label: '# of ordered injections',\r\n        data: [antiqua.vaccineCount, \r\n          solarBuddhica.vaccineCount, \r\n          zerpfy.vaccineCount],\r\n        backgroundColor: [\r\n          colors.antiquaPrimary,\r\n          colors.solarBuddhicaPrimary,\r\n          colors.zerpfyPrimary,\r\n        ],\r\n        borderColor: [\r\n          colors.antiquaSecondary,\r\n          colors.solarBuddhicaSecondary,\r\n          colors.zerpfySecondary,\r\n        ],\r\n        borderWidth: 1,\r\n      },\r\n    ],\r\n  }\r\n  const options = {\r\n\r\n    plugins: {\r\n      title: {\r\n        display: true,\r\n        text: 'Number of vaccines by producer',\r\n      },\r\n    },\r\n  }\r\n  return <Doughnut data={data} options={options} />\r\n}\r\n\r\nInjectionGraph.propTypes = {\r\n  antiqua: PropTypes.object,\r\n  solarBuddhica: PropTypes.object,\r\n  zerpfy: PropTypes.object,\r\n}\r\n\r\nexport default InjectionGraph","import { Pie } from 'react-chartjs-2'\r\nimport PropTypes from 'prop-types'\r\nimport colors from '../utils/colors'\r\nimport React from 'react'\r\n\r\nconst UnusedVaccineGraph = ({usedVaccineCount, unusedVaccineCount}) => {\r\n  const data = {\r\n    labels: ['Used vaccines', 'Unused vaccines'],\r\n    datasets: [\r\n      {\r\n        label: '# of all vaccines and # of unused vaccines',\r\n        data: [\r\n          usedVaccineCount,\r\n          unusedVaccineCount,\r\n        ],\r\n        backgroundColor: [\r\n          colors.usedPrimary,\r\n          colors.unusedPrimary,\r\n\r\n        ],\r\n        borderColor: [\r\n          colors.usedSecondary,\r\n          colors.unusedSecondary,\r\n\r\n        ],\r\n        borderWidth: 1,\r\n      },\r\n    ],\r\n  }\r\n  const options = {\r\n    plugins: {\r\n      title: {\r\n        display: true,\r\n        text: 'Comparison between used and unused vaccines',\r\n      },\r\n    },\r\n  }\r\n  return <Pie data={data} options={options} />\r\n}\r\n\r\n  \r\nUnusedVaccineGraph.propTypes = {\r\n  usedVaccineCount: PropTypes.number,\r\n  unusedVaccineCount: PropTypes.number,\r\n}\r\n\r\nexport default UnusedVaccineGraph","\r\nimport { Bar } from 'react-chartjs-2'\r\nimport PropTypes from 'prop-types'\r\nimport colors from '../utils/colors'\r\nimport React from 'react'\r\n  \r\nconst OrderGraph = ({antiqua, solarBuddhica, zerpfy}) => {\r\n\r\n  const data = {\r\n    labels: ['Antiqua orders', 'SolarBuddhica orders', 'Zerpfy orders'],\r\n    datasets: [\r\n      {\r\n        label: '# of orders',\r\n        data: [antiqua.orderCount, \r\n          solarBuddhica.orderCount, \r\n          zerpfy.orderCount],\r\n        backgroundColor: [\r\n          colors.antiquaPrimary,\r\n          colors.solarBuddhicaPrimary,\r\n          colors.zerpfyPrimary,\r\n        ],\r\n        borderColor: [\r\n          colors.antiquaSecondary,\r\n          colors.solarBuddhicaSecondary,\r\n          colors.zerpfySecondary,\r\n        ],\r\n        borderWidth: 1,\r\n      },\r\n    ],\r\n  }\r\n\r\n  const options = {\r\n    indexAxis: 'y',\r\n    elements: {\r\n      bar: {\r\n        borderWidth: 2,\r\n      },\r\n    },\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        position: 'top',\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: 'Number of orders by producer',\r\n      },\r\n    },\r\n  }\r\n  return <Bar data={data} options={options} />\r\n}\r\n\r\nOrderGraph.propTypes = {\r\n  antiqua: PropTypes.object,\r\n  solarBuddhica: PropTypes.object,\r\n  zerpfy: PropTypes.object,\r\n}\r\n\r\nexport default OrderGraph","import { Bar } from 'react-chartjs-2'\r\nimport PropTypes from 'prop-types'\r\nimport colors from '../utils/colors'\r\nimport React from 'react'\r\n  \r\n//displays date-specific information.\r\nconst SpecificDateGraph = ({ordersOnDate, injectionsOnDate}) => {\r\n  const data = {\r\n    labels: ['Orders', 'Injections'],\r\n    datasets: [\r\n      {\r\n        label: '# of events on exact date',\r\n        data: [ordersOnDate, injectionsOnDate],\r\n        backgroundColor: [\r\n          colors.antiquaPrimary,\r\n          colors.zerpfyPrimary,\r\n        ],\r\n        borderColor: [\r\n          colors.antiquaSecondary,\r\n          colors.zerpfySecondary,\r\n        ],\r\n        borderWidth: 1,\r\n      },\r\n    ],\r\n  }\r\n\r\n  const options = {\r\n    indexAxis: 'y',\r\n    elements: {\r\n      bar: {\r\n        borderWidth: 2,\r\n      },\r\n    },\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        position: 'top',\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: 'Events on the selected date',\r\n      },\r\n    },\r\n  }\r\n  return <Bar data={data} options={options} />\r\n}\r\n\r\nSpecificDateGraph.propTypes = {\r\n  ordersOnDate: PropTypes.number,\r\n  injectionsOnDate: PropTypes.number,\r\n}\r\n\r\nexport default SpecificDateGraph\r\n  ","import { Bar } from 'react-chartjs-2'\r\nimport PropTypes from 'prop-types'\r\nimport colors from '../utils/colors'\r\nimport React from 'react'\r\n\r\n\r\n// displays some aggregated data until the selected date.\r\n// TODO: update this as more data is ready to be displayed.\r\nconst AggregatedDataGraph = ({injectedUpToDate, expiredUpToDate, usableOnDate}) => {\r\n  const data = {\r\n    labels: ['Total given injections', 'Total expired injections', 'Usable injections'],\r\n    datasets: [\r\n      {\r\n        label: '# of all events',\r\n        data: [injectedUpToDate, expiredUpToDate, usableOnDate],\r\n        backgroundColor: [\r\n          colors.antiquaPrimary,\r\n          colors.solarBuddhicaPrimary,\r\n          colors.zerpfyPrimary,\r\n        ],\r\n        borderColor: [\r\n          colors.antiquaSecondary,\r\n          colors.solarBuddhicaSecondary,\r\n          colors.zerpfySecondary,\r\n        ],\r\n        borderWidth: 1,\r\n      },\r\n    ],\r\n  }\r\n\r\n  const options = {\r\n    indexAxis: 'y',\r\n    elements: {\r\n      bar: {\r\n        borderWidth: 2,\r\n      },\r\n    },\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        position: 'top',\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: 'Aggregated data until the selected date',\r\n      },\r\n    },\r\n  }\r\n  return <Bar data={data} options={options} />\r\n}\r\n\r\n    \r\nAggregatedDataGraph.propTypes = {\r\n  injectedUpToDate: PropTypes.number,\r\n  expiredUpToDate: PropTypes.number,\r\n  usableOnDate: PropTypes.number,\r\n}\r\n  \r\nexport default AggregatedDataGraph","import React from 'react'\r\nimport { ContentWrapper, BackgroundWrapper, ChartWrapper, SubHeader } from '../utils/wrappers'\r\nimport InjectionGraph from '../graphs/InjectionGraph'\r\nimport UnusedVaccineGraph from '../graphs/UnusedVaccineGraph'\r\nimport OrderGraph from '../graphs/OrderGraph'\r\nimport SpecificDateGraph from '../graphs/SpecificDateGraph'\r\nimport AggregatedDataGraph from '../graphs/AggregatedDataGraph'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Charts = props => {\r\n  return (\r\n    <>\r\n      {props.showDateCharts && <ContentWrapper>\r\n        <BackgroundWrapper>\r\n          <SubHeader>Date-specific charts</SubHeader>\r\n        </BackgroundWrapper>\r\n        <ChartWrapper>\r\n          Injections expiring in the next 10 days: <b>{props.tenDayExpirations}</b>\r\n        </ChartWrapper>\r\n        <ChartWrapper>\r\n          <SpecificDateGraph injectionsOnDate={props.injectionsOnDate} ordersOnDate={props.ordersOnDate}/>\r\n        </ChartWrapper>\r\n        <ChartWrapper>\r\n          <AggregatedDataGraph injectedUpToDate={props.injectedUpToDate} expiredUpToDate={props.expiredUpToDate} usableOnDate={props.usableOnDate}/>\r\n        </ChartWrapper>\r\n      </ContentWrapper>}\r\n      {props.showAggregatedCharts && <ContentWrapper>\r\n        <BackgroundWrapper>\r\n          <SubHeader>Aggregated charts</SubHeader>\r\n        </BackgroundWrapper>\r\n        <ChartWrapper>\r\n          <InjectionGraph antiqua={props.antiqua} solarBuddhica={props.solarBuddhica} zerpfy={props.zerpfy}/>\r\n        </ChartWrapper>\r\n        <ChartWrapper>\r\n          <OrderGraph antiqua={props.antiqua} solarBuddhica={props.solarBuddhica} zerpfy={props.zerpfy}/>\r\n        </ChartWrapper>\r\n        <ChartWrapper>\r\n          <UnusedVaccineGraph usedVaccineCount={props.usedVaccineCount} unusedVaccineCount={props.unusedVaccineCount}/>\r\n        </ChartWrapper>\r\n      </ContentWrapper>}\r\n    </>\r\n  )\r\n}\r\n\r\nCharts.propTypes = {\r\n  showDateCharts: PropTypes.bool,\r\n  showAggregatedCharts: PropTypes.bool,\r\n  injectionsOnDate: PropTypes.number,\r\n  ordersOnDate: PropTypes.number,\r\n  injectedUpToDate: PropTypes.number,\r\n  expiredUpToDate: PropTypes.number,\r\n  usableOnDate: PropTypes.number,\r\n  tenDayExpirations: PropTypes.number,\r\n  antiqua: PropTypes.object,\r\n  solarBuddhica: PropTypes.object,\r\n  zerpfy: PropTypes.object,\r\n  usedVaccineCount: PropTypes.number,\r\n  unusedVaccineCount: PropTypes.number,\r\n}\r\n\r\nexport default Charts","import PropTypes from 'prop-types'\r\nimport React from 'react'\r\nimport { ContentWrapper, InfoWrapper, BackgroundWrapper, Header, SubHeader } from '../utils/wrappers'\r\n\r\nconst GeneralInfo = ({ antiqua, solarBuddhica, zerpfy, totalOrderCount, totalVaccineCount, injections }) => {\r\n  return (<>\r\n    <ContentWrapper>\r\n      <Header>General information</Header>\r\n    </ContentWrapper>\r\n    <ContentWrapper>\r\n      <BackgroundWrapper>\r\n        <SubHeader>How many orders and vaccines have arrived in total?</SubHeader>\r\n        <InfoWrapper>\r\n          <div>All in all, there are this many orders in total: {totalOrderCount}</div> \r\n          <div>All in all, there are this many vaccines in total: {totalVaccineCount}</div> \r\n        </InfoWrapper>\r\n      </BackgroundWrapper>\r\n    </ContentWrapper>\r\n    <ContentWrapper>\r\n      <BackgroundWrapper>\r\n        <SubHeader>How many of the vaccinations have been used?</SubHeader>\r\n        <InfoWrapper>\r\n          <div>This many vaccinations have been distributed: {injections}</div> \r\n        </InfoWrapper>\r\n      </BackgroundWrapper>\r\n    </ContentWrapper>\r\n    <ContentWrapper>\r\n      <BackgroundWrapper>\r\n        <SubHeader>How many orders/vaccines per producer?</SubHeader>\r\n        <InfoWrapper>\r\n          <div>There are this many Antiqua-vaccination orders: {antiqua.orderCount}</div>\r\n          <div>Antiqua vaccine count: {antiqua.vaccineCount}</div>\r\n          <div>There are this many SolarBuddhica-vaccination orders: {solarBuddhica.orderCount}</div>\r\n          <div>SolarBuddhica vaccine count: {solarBuddhica.vaccineCount}</div>\r\n          <div>There are this many Zerpfy-vaccination orders: {zerpfy.orderCount}</div>\r\n          <div>Zerpfy vaccine count: {zerpfy.vaccineCount}</div>\r\n        </InfoWrapper>\r\n      </BackgroundWrapper>\r\n    </ContentWrapper>\r\n  </>)\r\n}\r\n\r\nGeneralInfo.propTypes = {\r\n  antiqua: PropTypes.object,\r\n  solarBuddhica: PropTypes.object,\r\n  zerpfy: PropTypes.object,\r\n  totalOrderCount: PropTypes.number,\r\n  totalVaccineCount: PropTypes.number,\r\n  injections: PropTypes.number,\r\n}\r\n\r\nexport default GeneralInfo","import { ContentWrapper, InfoWrapper, BackgroundWrapper, SubHeader } from '../utils/wrappers'\r\nimport React from 'react'\r\nimport DatePicker from 'react-datepicker'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst DateSelector = props => {\r\n  return (\r\n    <ContentWrapper>\r\n      <BackgroundWrapper>\r\n        <SubHeader>Select a date to inspect!</SubHeader>\r\n        <InfoWrapper>\r\n          <DatePicker selected={props.selectedDate} onChange={(date) => props.handleDateChange(date)} />\r\n          <div><i>Selected date: {props.selectedDate.toString()}</i></div>\r\n        </InfoWrapper>\r\n      </BackgroundWrapper>\r\n    </ContentWrapper>\r\n  )\r\n}\r\n\r\nDateSelector.propTypes = {\r\n  selectedDate: PropTypes.instanceOf(Date),\r\n  handleDateChange: PropTypes.func,\r\n}\r\n\r\n\r\nexport default DateSelector","import React from 'react'\r\nimport { FooterWrapper } from '../utils/wrappers'\r\n\r\nconst Footer = () => {\r\n  return (<FooterWrapper>\r\n    <a href='https://github.com/GitHenrik/vaccine-exercise-2021' target=\"_blank\" rel=\"noopener noreferrer\">Source code</a>\r\n  </FooterWrapper>)\r\n}\r\n\r\nexport default Footer","import React from 'react'\r\nimport { BannerWrapper, Header, SubHeader } from '../utils/wrappers'\r\n\r\nconst Banner = () => {\r\n  return (\r\n    <BannerWrapper>   \r\n      <Header>VacciNex</Header>\r\n      <SubHeader><i>Antiqua - SolarBuddhica - Zerpfy</i></SubHeader>\r\n    </BannerWrapper>\r\n  )\r\n}\r\n\r\nexport default Banner","/**\r\n   * Updates state based on selected date, updating state with aggregated data.\r\n   * \r\n   * @param {Array} orderData two-dimensional array of all producers' orders\r\n   * @param {Array} vaccinationData array of data on given injections\r\n   * @param {Date} date selected date for calculations\r\n   * @returns {Object} all aggregated data combined into a single object\r\n   */\r\nexport const calculateAggregatedData = (orderData, vaccinationData, date) => {\r\n  const usableAndInjected = calculateUsableAndInjectedVaccines(orderData, vaccinationData, date)\r\n  const tenDayExpirations = calculateTenDayExpirations(orderData, vaccinationData, date)\r\n  const expiredUpToDate = calculateExpirationsUpToDate(orderData, vaccinationData, date)\r\n  return {\r\n    usable: usableAndInjected.usable,\r\n    injected: usableAndInjected.injected,\r\n    tenDayExpirations: tenDayExpirations,\r\n    expiredUpToDate: expiredUpToDate,\r\n  }\r\n}\r\n  \r\n/**\r\n   * Loops through order data and counts how many vaccines are included in them.\r\n   * \r\n   * @param {Array} producerData array of vaccination orders from a single producer\r\n   * @returns {Number} total amount of vaccines included in the order array\r\n   */\r\nexport const getVaccinesPerProducer = producerData => {\r\n  if (!producerData || producerData.length === 0) return 0\r\n  let injectionCount = producerData.reduce((injected, next) => {\r\n    return {injections: injected.injections + next.injections}\r\n  })\r\n  return injectionCount.injections\r\n}\r\n\r\n/**\r\n   * Counts how many vaccines are usable on and were injected up to the selected date.\r\n   * \r\n   * @param {Array} orderData two-dimensional array of all producers' orders\r\n   * @param {Array} vaccinationData array of data on given injections\r\n   * @param {Date} date selected date for calculations\r\n   * @returns {Object} object containing the number of usable and injected vaccines\r\n   */\r\nexport const calculateUsableAndInjectedVaccines = (orderData, vaccinationData, date) => {\r\n  let expirationArrays = calculateExpirationArrays(orderData, date)\r\n  let injectionArrays = calculateInjectionArrays(vaccinationData, date)\r\n  let notExpiredCount = 0\r\n  let usableCount = 0\r\n  for (let i = 0; i < expirationArrays[1].length; i++) {\r\n    notExpiredCount += expirationArrays[1][i].injections\r\n  }\r\n  let givenNotExpired = 0\r\n  for (let i = 0; i < injectionArrays[0].length; i++) {\r\n    for (let j = 0; j < expirationArrays[1].length; j++) {\r\n      if (injectionArrays[0][i].sourceBottle === expirationArrays[1][j].id) {\r\n        givenNotExpired++\r\n        break\r\n      }\r\n    }\r\n  }\r\n  usableCount = notExpiredCount - givenNotExpired\r\n  return {\r\n    usable: usableCount,\r\n    injected: injectionArrays[0].length\r\n  }\r\n}\r\n  \r\n/**\r\n   * Source for this code snippet, slightly modified:\r\n   * https://stackoverflow.com/a/19691491\r\n   * \r\n   * Creates a secondary date 10 days in the future, and counts how many vaccines will expire in that time.\r\n   * @param {Array} orderData two-dimensional array of all producers' orders\r\n   * @param {Array} vaccinationData array of data on given injections\r\n   * @param {Date} date selected date for calculations\r\n   * @returns {Number} amount of vaccines expiring in 10 days following the selected date\r\n   */\r\nexport const calculateTenDayExpirations = (orderData, vaccinationData, date) => {\r\n  let currentExpirations = calculateExpirationsUpToDate(orderData, vaccinationData, date)\r\n  let futureDate = new Date(date)\r\n  futureDate.setDate(futureDate.getDate() + 10)\r\n  let futureExpirations = calculateExpirationsUpToDate(orderData, vaccinationData, futureDate)\r\n  return futureExpirations - currentExpirations\r\n}\r\n\r\n\r\n/**\r\n   * Calculates how many vaccinations had expired up to the selected date.\r\n   * \r\n   * @param {Array} orderData two-dimensional array of all producers' orders\r\n   * @param {Array} vaccinationData array of data on given injections\r\n   * @param {Date} date selected date for calculations\r\n   * @returns {Number} total amount of expired vaccines up to the selected date\r\n   */\r\nexport const calculateExpirationsUpToDate = (orderData, vaccinationData, date) => {\r\n  let expirationArrays = calculateExpirationArrays(orderData, date)\r\n  let injectionArrays = calculateInjectionArrays(vaccinationData, date)\r\n  let expiredInjections = 0\r\n  // calculate total expirations as if none were given\r\n  for (let i = 0; i < expirationArrays[0].length; i++) {\r\n    expiredInjections += expirationArrays[0][i].injections\r\n  }\r\n  // reduce the potential expirations with those that were actually given\r\n  for (let i = 0; i < injectionArrays[0].length; i++) {\r\n    for (let j = 0; j < expirationArrays[0].length; j++) {\r\n      if (injectionArrays[0][i].sourceBottle === expirationArrays[0][j].id) {\r\n        expiredInjections--\r\n        break\r\n      }\r\n    }\r\n  }\r\n  return expiredInjections\r\n}\r\n\r\n\r\n/**\r\n   * Creates two arrays, separating expired and not expired vaccinations from the order data.\r\n   * \r\n   * @param {Array} orderData two-dimensional array containing all producers' orders\r\n   * @param {Date} date selected date for calculations\r\n   * @returns {Array} two-dimensional array containing expired and not expired vaccines on selected date\r\n   */\r\nexport const calculateExpirationArrays = (orderData, date) => {\r\n  const expiredOrders = []\r\n  const notExpiredOrders = []\r\n  let nextTime = 0\r\n  const thirtyDaysMilliseconds = 30 * 24 * 60 * 60 * 1000\r\n  let endTime = date.getTime()\r\n  // search through all orders from all producers, split into expired and not expired arrays\r\n  for (let i = 0; i < orderData.length; i++) {\r\n    for (let j = 0; j < orderData[i].length; j++) {\r\n      nextTime = new Date(orderData[i][j].arrived).getTime()\r\n      if (endTime - nextTime > thirtyDaysMilliseconds) {\r\n        expiredOrders.push(orderData[i][j])\r\n      }\r\n      if (endTime - nextTime <= thirtyDaysMilliseconds\r\n              && endTime - nextTime >= 0) {\r\n        notExpiredOrders.push(orderData[i][j])\r\n      }\r\n      // else do nothing, the order would be in the future.\r\n    }\r\n  }\r\n  return [expiredOrders, notExpiredOrders]\r\n}\r\n\r\n/**\r\n   * Counts how many orders a producer placed on the selected date.\r\n   * \r\n   * @param {Array} data vaccine producer's order data\r\n   * @param {Date} date selected date for calculations\r\n   * @returns {Number} amount of orders made on the exact date\r\n   */\r\nexport const getOrdersOnDate = (data, date) => {\r\n  let orderCount = 0\r\n  let nextDate = new Date()\r\n  // loop through all data and check for a matching arrival date\r\n  for (let i = 0; i < data.length; i++) {\r\n    nextDate = new Date(data[i].arrived)\r\n    if (nextDate.getFullYear() === date.getFullYear() && \r\n            nextDate.getMonth() === date.getMonth() && \r\n            nextDate.getDate() === date.getDate()) {\r\n      orderCount++\r\n    }\r\n  }\r\n  return orderCount\r\n}\r\n\r\n/**\r\n   * Creates two arrays, separating given and not given injections from the injection data.\r\n   * \r\n   * @param {Array} data array of data on given injections\r\n   * @param {Date} date selected date for calculations\r\n   * @returns {Array} two-dimensional array containing given and not given vaccines on selected date\r\n   */\r\nexport const calculateInjectionArrays = (data, date) => {\r\n  let nextTime = 0\r\n  let endTime = date.getTime()\r\n  const given = []\r\n  const notGiven = []\r\n  // loop through all injections and check the date\r\n  for (let i = 0; i < data.length; i++) {\r\n    nextTime = new Date(data[i].vaccinationDate).getTime()\r\n    // split data into given and not given based on date\r\n    if (endTime  - nextTime > 0) {\r\n      given.push(data[i])\r\n    } else {\r\n      notGiven.push(data[i])\r\n    }\r\n  }\r\n  return [given, notGiven]\r\n}\r\n\r\n/**\r\n   * Counts how many vaccines were injected exactly on the selected date.\r\n   * \r\n   * @param {Array} data array of data on given injections\r\n   * @param {Date} date selected date for calculations\r\n   * @returns {Number} amount of injections given on the date\r\n   */\r\nexport const getVaccinesOnDate = (data, date) => {\r\n  let vaccineCount = 0\r\n  let nextDate = new Date()\r\n  // loop through all given injections and check that the date matches\r\n  for (let i = 0; i < data.length; i++) {\r\n    nextDate = new Date(data[i].vaccinationDate)\r\n    if (nextDate.getFullYear() === date.getFullYear() && \r\n              nextDate.getMonth() === date.getMonth() && \r\n              nextDate.getDate() === date.getDate()) {\r\n      vaccineCount++\r\n    } \r\n  }\r\n  return vaccineCount\r\n}\r\n\r\n","require('dotenv').config()\r\nimport axios from 'axios'\r\nimport { useState, useEffect } from 'react'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\nimport './css/base.css'\r\nimport React from 'react'\r\nimport Loader from './components/Loader'\r\nimport { SubHeader, DisplayWrapper, SidebarWrapper, MainContentWrapper } from './utils/wrappers'\r\nimport Charts from './components/Charts'\r\nimport GeneralInfo from './components/GeneralInfo'\r\nimport DateSelector from './components/DateSelector'\r\nimport Footer from './components/Footer'\r\nimport Banner from './components/Banner'\r\nimport { getVaccinesPerProducer, \r\n  getVaccinesOnDate,  \r\n  getOrdersOnDate, \r\n  calculateAggregatedData } from './helpers/calculations'\r\n\r\n// const baseUrl = process.env.REACT_APP_DEV_URL\r\nconst baseUrl = ''\r\n\r\nconst App = () => { \r\n  const placeholder = {\r\n    data: [],\r\n    orderCount: 0,\r\n    vaccineCount: 0,\r\n    // ...\r\n  }\r\n\r\n  const [loading, setLoading] = useState(true)\r\n\r\n  const [vaccinationData, setVaccinationData] = useState([])\r\n  const [antiqua, setAntiqua] = useState(placeholder)\r\n  const [solarBuddhica, setSolarBuddhica] = useState(placeholder)\r\n  const [zerpfy, setZerpfy] = useState(placeholder)\r\n\r\n  const [selectedDate, setSelectedDate] = useState(new Date('2021-04-12T11:10:06.473587Z'))\r\n\r\n  // states to toggle display from the UI\r\n  const [showGeneralInfo, setShowGeneralInfo] = useState(true)\r\n  const [showDateCharts, setShowDateCharts] = useState(false)\r\n  const [showAggregatedCharts, setShowAggregatedCharts] = useState(false)\r\n\r\n  // states for date-specific data display\r\n  const [ordersOnDate, setOrdersOnDate] = useState(0)\r\n  const [injectionsOnDate, setInjectionsOnDate] = useState(0)\r\n  const [expiredUpToDate, setExpiredUpToDate] = useState(0)\r\n  const [injectedUpToDate, setInjectedUpToDate] = useState(0)\r\n  const [usableOnDate, setUsableOnDate] = useState(0)\r\n  const [tenDayExpirations, setTenDayExpirations] = useState(0)\r\n\r\n  // states for general data\r\n  const [totalVaccineCount, setTotalVaccineCount] = useState(0)\r\n  const [totalOrderCount, setTotalOrderCount] = useState(0)\r\n  const [usedVaccineCount, setUsedVaccineCount] = useState(0)\r\n  const [unusedVaccineCount, setUnusedVaccineCount] = useState(0)\r\n\r\n  useEffect(() => {\r\n    getBaseData()\r\n    // display a nice-looking loader to users for a short while\r\n    setTimeout(() => setLoading(false), 2000)\r\n    return () => {\r\n      // cleanup function\r\n    }\r\n  }, [])\r\n\r\n  const getBaseData = async () => {\r\n    const antiquaResult = await axios.get(`${baseUrl}/Antiqua`)\r\n    const antiquaVaccines = getVaccinesPerProducer(antiquaResult.data)\r\n    setAntiqua({\r\n      data: antiquaResult.data,\r\n      orderCount: antiquaResult.data.length,\r\n      vaccineCount: antiquaVaccines,\r\n    })\r\n    setTotalVaccineCount(count => count + antiquaVaccines)\r\n    setTotalOrderCount(count => count + antiquaResult.data.length)\r\n    \r\n    const solarBuddhicaResult = await axios.get(`${baseUrl}/SolarBuddhica`)\r\n    const solarBuddhicaVaccines = getVaccinesPerProducer(solarBuddhicaResult.data)\r\n    setSolarBuddhica({\r\n      data: solarBuddhicaResult.data,\r\n      orderCount: solarBuddhicaResult.data.length,\r\n      vaccineCount: solarBuddhicaVaccines,\r\n    })\r\n    setTotalVaccineCount(count => count + solarBuddhicaVaccines)\r\n    setTotalOrderCount(count => count + solarBuddhicaResult.data.length)\r\n\r\n    const zerpfyResult = await axios.get(`${baseUrl}/Zerpfy`)\r\n    const zerpfyVaccines = getVaccinesPerProducer(zerpfyResult.data)\r\n    setZerpfy({\r\n      data: zerpfyResult.data,\r\n      orderCount: zerpfyResult.data.length,\r\n      vaccineCount: zerpfyVaccines,\r\n    })\r\n    setTotalVaccineCount(count => count + zerpfyVaccines)\r\n    setTotalOrderCount(count => count + zerpfyResult.data.length)\r\n\r\n    const vaccinationResult = await axios.get(`${baseUrl}/vaccinations`)\r\n    setVaccinationData(vaccinationResult.data)\r\n    setUsedVaccineCount(vaccinationResult.data.length)\r\n    setUnusedVaccineCount(antiquaVaccines + solarBuddhicaVaccines + zerpfyVaccines - vaccinationResult.data.length)\r\n  }\r\n\r\n\r\n  /**\r\n  * Updates all date-related states upon selecting a new date.\r\n  * \r\n  * @param {Date} date selected date is used for all calculations\r\n  */\r\n  const handleDateChange = date => {\r\n    setSelectedDate(date)\r\n    setOrdersOnDate(getOrdersOnDate(antiqua.data, date) + \r\n      getOrdersOnDate(solarBuddhica.data, date) + \r\n      getOrdersOnDate(zerpfy.data, date))\r\n    setInjectionsOnDate(getVaccinesOnDate(vaccinationData, date))\r\n    const aggregatedData = calculateAggregatedData([antiqua.data, solarBuddhica.data, zerpfy.data], vaccinationData, date)\r\n    setUsableOnDate(aggregatedData.usable)\r\n    setInjectedUpToDate(aggregatedData.injected)\r\n    setTenDayExpirations(aggregatedData.tenDayExpirations)\r\n    setExpiredUpToDate(aggregatedData.expiredUpToDate)\r\n    // displays charts about the date\r\n    setShowGeneralInfo(false)\r\n    setShowDateCharts(true)\r\n  }\r\n  \r\n  if (loading) {\r\n    return (\r\n      <>\r\n        <Banner/>\r\n        <Loader/>\r\n        <Footer/>\r\n      </>\r\n    )\r\n  }\r\n\r\n  // TODO: make view stretch to 100% height\r\n  return (\r\n    <>\r\n      <Banner/>\r\n      <MainContentWrapper>\r\n        <SidebarWrapper>\r\n          <DateSelector selectedDate={selectedDate} handleDateChange={handleDateChange}/>\r\n          <button onClick={() => setShowGeneralInfo(!showGeneralInfo)}>{showGeneralInfo ? 'Hide ' : 'Show '}general data</button>\r\n          <button onClick={() => setShowDateCharts(!showDateCharts)}>{showDateCharts ? 'Hide ' : 'Display '}date-specific charts</button>\r\n          <button onClick={() => setShowAggregatedCharts(!showAggregatedCharts)}>{showAggregatedCharts ? 'Hide ' : 'Display '}aggregated charts</button>\r\n        </SidebarWrapper>\r\n        <DisplayWrapper>\r\n          {!showGeneralInfo && !showAggregatedCharts && !showDateCharts && <SubHeader>Select something to display from the side bar!</SubHeader>}\r\n          {showGeneralInfo && <GeneralInfo antiqua={antiqua} \r\n            solarBuddhica={solarBuddhica} \r\n            zerpfy={zerpfy} \r\n            totalOrderCount={totalOrderCount} \r\n            totalVaccineCount={totalVaccineCount} \r\n            injections={vaccinationData.length}/>}\r\n          <Charts \r\n            showAggregatedCharts={showAggregatedCharts}\r\n            showDateCharts={showDateCharts}\r\n            injectionsOnDate={injectionsOnDate} \r\n            ordersOnDate={ordersOnDate}\r\n            injectedUpToDate={injectedUpToDate}\r\n            expiredUpToDate={expiredUpToDate} \r\n            usableOnDate={usableOnDate}\r\n            tenDayExpirations={tenDayExpirations}\r\n            antiqua={antiqua}\r\n            solarBuddhica={solarBuddhica}\r\n            zerpfy={zerpfy}\r\n            usedVaccineCount={usedVaccineCount} \r\n            unusedVaccineCount={unusedVaccineCount}/>      \r\n        </DisplayWrapper>\r\n      </MainContentWrapper>\r\n      <Footer/>\r\n    </>\r\n\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry)\r\n      getFID(onPerfEntry)\r\n      getFCP(onPerfEntry)\r\n      getLCP(onPerfEntry)\r\n      getTTFB(onPerfEntry)\r\n    })\r\n  }\r\n}\r\n\r\nexport default reportWebVitals\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}